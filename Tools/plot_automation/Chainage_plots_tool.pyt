# -*- coding: utf-8 -*-import arcpyimport chainage_plots_tool as cptimport importlibimportlib.reload(cpt)class Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        # Parameter         outputs_list_1 = arcpy.Parameter(            displayName="List of Plot Output layers",            name="outputs_list_1",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input",            multiValue=True            )        # Parameter         outputs_list_2 = arcpy.Parameter(            displayName="List of Plot Output layers to compare",            name="outputs_list_2",            datatype="GPFeatureLayer",            parameterType="Optional",            direction="Input",            multiValue=True            )        # Parameter         reaches_list = arcpy.Parameter(            displayName="List of feature class reaches to plot",            name="reaches_list",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input",            multiValue=True            )        # Parameter         calibration_flag = arcpy.Parameter(            displayName="Add calibration chart on top (tip: two charts minimum)",            name="calibration_flag",            datatype="GPBoolean",            parameterType="Required",            direction="Input",            )        calibration_flag.value = True        # Parameter         target_flag = arcpy.Parameter(            displayName="Add targets to the plots",            name="target_flag",            datatype="GPBoolean",            parameterType="Required",            direction="Input",            )        target_flag.value = False        # Parameter         annotate_flag = arcpy.Parameter(            displayName="Annotate plots with discharge feature names",            name="annotate_flag",            datatype="GPBoolean",            parameterType="Required",            direction="Input",            )        annotate_flag.value = True        # Parameter         annotate_filter = arcpy.Parameter(            displayName="Minimum concentration increase to annotate a feature",            name="annotate_filter",            datatype="GPDouble",            parameterType="Optional",            direction="Input",            )        annotate_filter.value = 0        # NOTE Would be interesting to use dependencies:        # annotate_filter.parameterDependencies = [param0.name]        # Parameter         annotate_features = arcpy.Parameter(            displayName="Specific features to annotate",            name="annotate_features",            datatype="GPString",            parameterType="Optional",            direction="Input",            multiValue=True,            )        # Parameter         custom_annotations = arcpy.Parameter(            displayName="Custom labels to annotate the chart",            name="custom_annotations",            datatype="GPValueTable",            parameterType="Optional",            direction="Input",            multiValue=True,            )        custom_annotations.columns = [['GPString', 'Name'], ['GPDouble', 'Distance (km)']]        # Parameter         headwater_flag = arcpy.Parameter(            displayName="Remove headwater point",            name="headwater_flag",            datatype="GPBoolean",            parameterType="Required",            direction="Input",            )        headwater_flag.value = False        # Parameter         figure_size = arcpy.Parameter(            displayName="Figure size",            name="figure_size",            datatype="GPLong",            parameterType="Required",            direction="Input",            )        figure_size.value = 10        # Parameter         aspect_ratio_modifier = arcpy.Parameter(            displayName="Aspect ratio modifier",            name="aspect_ratio_modifier",            datatype="GPDouble",            parameterType="Required",            direction="Input",            )        aspect_ratio_modifier.value = 1        # Parameter         legend_loc = arcpy.Parameter(            displayName="Legend location",            name="legend_loc",            datatype="GPString",            parameterType="Required",            direction="Input",            )        legend_loc.value = "best"        legend_loc.filter.type = 'ValueList'        legend_loc.filter.list = [            'best',            'upper right',            'upper left',            'lower left',            'lower right',            'right',            'center left',            'center right',            'lower center',            'upper center',            'center',        ]        # Pack all parameters together        params = [            outputs_list_1,            outputs_list_2,             reaches_list,            calibration_flag,            target_flag,            headwater_flag,            annotate_flag,            annotate_filter,            annotate_features,            custom_annotations,            figure_size,            aspect_ratio_modifier,            legend_loc        ]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        # Retrieve parameters        params_dict = {p.name: p.valueAsText for p in parameters}        # Launch main function        cpt.chainage_plots(params_dict)         return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return